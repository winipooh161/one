<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Recipe;
use App\Models\SocialPost;
use App\Services\TelegramService;
use App\Services\VkService;
use App\Services\ZenService;
use App\Services\TelegramChannelService; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class RecipeSocialController extends Controller
{
    protected $vkService;
    protected $telegramService;

    public function __construct(VkService $vkService, TelegramService $telegramService)
    {
        $this->vkService = $vkService;
        $this->telegramService = $telegramService;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
     */
    public function index()
    {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ —Å–æ—Ü—Å–µ—Ç–∏
        $recipes = Recipe::where('is_published', true)
            ->whereDoesntHave('socialPosts')
            ->latest()
            ->paginate(10);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã
        $publishedRecipes = Recipe::whereHas('socialPosts')
            ->with('socialPosts')
            ->latest()
            ->take(5)
            ->get();

        return view('admin.recipe_social.index', compact('recipes', 'publishedRecipes'));
    }

    /**
     * –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Ü—Å–µ—Ç–∏
     */
    public function preview($id)
    {
        $recipe = Recipe::findOrFail($id);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        $imageUrl = $recipe->image_url; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –º–æ–¥–µ–ª–∏ Recipe –µ—Å—Ç—å –ø–æ–ª–µ image_url
        
        // –ï—Å–ª–∏ image_url –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (empty($imageUrl)) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–∞–ª–µ—Ä–µ–µ
            if ($recipe->images && count($recipe->images) > 0) {
                $imageUrl = $recipe->images[0];
            } else {
                // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                $imageUrl = asset('images/default-recipe.jpg');
            }
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        $content = $this->generateSocialContent($recipe);
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –î–∑–µ–Ω
        $zenContent = $this->generateZenContent($recipe);
        
        return view('admin.recipe_social.preview', compact('recipe', 'content', 'zenContent', 'imageUrl'));
    }

    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
     */
    public function publish(Request $request, $id)
    {
        $recipe = Recipe::findOrFail($id);
        
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'content' => 'required|string',
            'publish_to_telegram' => 'nullable|boolean',
            'publish_to_vk' => 'nullable|boolean',
        ]);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å
        if (!$request->has('publish_to_telegram') && !$request->has('publish_to_vk')) {
            return redirect()->back()->with('error', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        $imageUrl = $this->getValidImageUrl($recipe);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        $socialPost = new SocialPost();
        $socialPost->title = $validated['title'];
        $socialPost->content = $validated['content'];
        $socialPost->recipe_id = $recipe->id;
        $socialPost->image_url = $imageUrl;
        $socialPost->save();
        
        \Log::info('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', [
            'post_id' => $socialPost->id,
            'recipe_id' => $recipe->id,
            'image_url' => $imageUrl
        ]);
        
        $errors = [];
        $success = [];
        
        // –ü—É–±–ª–∏–∫—É–µ–º –≤ –¢–µ–ª–µ–≥—Ä–∞–º
        if ($request->has('publish_to_telegram')) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
            $telegramSettings = $this->telegramService->checkSettings();
            
            if (!$telegramSettings['success']) {
                $errors[] = '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram: ' . implode(', ', $telegramSettings['errors']);
            } else if ($this->telegramService->sendMessage($socialPost->content, $socialPost->image_url)) {
                $socialPost->update([
                    'telegram_status' => true,
                    'telegram_posted_at' => now(),
                ]);
                $success[] = '–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram';
            } else {
                $errors[] = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –≤ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.';
            }
        }
        
        // –ü—É–±–ª–∏–∫—É–µ–º –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        if ($request->has('publish_to_vk')) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
            $vkSettings = $this->vkService->checkSettings();
            
            if (!$vkSettings['success']) {
                $errors[] = '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: ' . implode(', ', $vkSettings['errors']);
            } else if ($this->vkService->publishPost($socialPost)) {
                $success[] = '–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ';
            } else {
                $errors[] = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.';
            }
        }
        
        if (!empty($errors)) {
            return redirect()->route('admin.recipe-social.index')
                ->with('error', implode('<br>', $errors))
                ->with('success', implode('<br>', $success));
        }
        
        return redirect()->route('admin.recipe-social.index')
            ->with('success', implode('<br>', $success));
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞
     */
    private function getValidImageUrl(Recipe $recipe)
    {
        $imageUrl = $recipe->getImageUrl();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ URL
        if (empty($imageUrl)) {
            return '';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º
        if (!str_starts_with($imageUrl, 'http://') && !str_starts_with($imageUrl, 'https://')) {
            $imageUrl = config('app.url') . '/' . ltrim($imageUrl, '/');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ URL
        if (filter_var($imageUrl, FILTER_VALIDATE_URL)) {
            try {
                $headers = get_headers($imageUrl, 1);
                if (strpos($headers[0], '200') === false) {
                    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—É—Ç—å
                    \Log::warning('Image URL is not accessible', [
                        'recipe_id' => $recipe->id, 
                        'image_url' => $imageUrl,
                        'headers' => $headers[0]
                    ]);
                       
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                    $localPath = str_replace(config('app.url'), '', $imageUrl);
                    $localPath = ltrim($localPath, '/');
                    
                    if (file_exists(public_path($localPath))) {
                        $imageUrl = config('app.url') . '/' . $localPath;
                        \Log::info('Found local file, using URL', ['image_url' => $imageUrl]);
                    } else {
                        \Log::warning('Local file not found', ['path' => public_path($localPath)]);
                    }
                }
            } catch (\Exception $e) {
                \Log::warning('Error checking image availability: ' . $e->getMessage());
            }
        }
        
        \Log::info('–ü–æ–ª—É—á–µ–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞', [
            'recipe_id' => $recipe->id,
            'image_url' => $imageUrl
        ]);
        
        return $imageUrl;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ —Å–æ—Ü—Å–µ—Ç–∏
     */
    private function generateSocialContent(Recipe $recipe)
    {
        $content = "üç≥ *{$recipe->title}*\n\n";
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (!empty($recipe->description)) {
            $content .= trim($recipe->description) . "\n\n";
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ –ø–æ—Ä—Ü–∏—è—Ö
        $content .= "‚è± *–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:* {$recipe->cooking_time} –º–∏–Ω—É—Ç\n";
        if (!empty($recipe->servings)) {
            $content .= "üë• *–ü–æ—Ä—Ü–∏–π:* {$recipe->servings}\n";
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
        if ($recipe->calories || $recipe->proteins || $recipe->fats || $recipe->carbs) {
            $content .= "\n*–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:*\n";
            if ($recipe->calories) $content .= "üî∏ –ö–∞–ª–æ—Ä–∏–∏: {$recipe->calories} –∫–∫–∞–ª\n";
            if ($recipe->proteins) $content .= "üî∏ –ë–µ–ª–∫–∏: {$recipe->proteins} –≥\n";
            if ($recipe->fats) $content .= "üî∏ –ñ–∏—Ä—ã: {$recipe->fats} –≥\n";
            if ($recipe->carbs) $content .= "üî∏ –£–≥–ª–µ–≤–æ–¥—ã: {$recipe->carbs} –≥\n";
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞
        if ($recipe->categories && $recipe->categories->count() > 0) {
            $content .= "\n*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* ";
            $categories = [];
            foreach ($recipe->categories as $category) {
                $categories[] = $category->name;
            }
            $content .= implode(', ', $categories) . "\n";
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–µ—Ü–µ–ø—Ç–µ
        if (!empty($recipe->ingredients) && is_string($recipe->ingredients)) {
            // –°—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            $content .= "\n*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n";
            $ingredients = explode("\n", $recipe->ingredients);
            foreach ($ingredients as $ingredient) {
                if (!empty(trim($ingredient))) {
                    $content .= "‚Ä¢ " . trim($ingredient) . "\n";
                }
            }
        } elseif ($recipe->ingredients && is_object($recipe->ingredients) && $recipe->ingredients->count() > 0) {
            // –ö–æ–ª–ª–µ–∫—Ü–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            $content .= "\nüìã *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n";
            foreach ($recipe->ingredients as $ingredient) {
                $content .= "‚Ä¢ {$ingredient->name}";
                if (!empty($ingredient->quantity)) {
                    $content .= " ‚Äî {$ingredient->quantity}";
                    if (!empty($ingredient->unit)) {
                        $content .= " {$ingredient->unit}";
                    }
                }
                $content .= "\n";
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –≤–∏–¥–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        if ($recipe->steps && is_object($recipe->steps) && $recipe->steps->count() > 0) {
            $content .= "\nüë®‚Äçüç≥ *–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:*\n";
            foreach ($recipe->steps as $index => $step) {
                $content .= ($index + 1) . ". {$step->description}\n";
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç
        $recipeUrl = route('recipes.show', $recipe->slug);
        
        // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ URL –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–º–µ–Ω
        if (!str_starts_with($recipeUrl, 'http')) {
            $recipeUrl = config('app.url') . $recipeUrl;
        }
        
        $content .= "\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ: {$recipeUrl}";
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        \Log::info('Generated social content with link', [
            'recipe_id' => $recipe->id,
            'url' => $recipeUrl,
            'content_length' => strlen($content)
        ]);
        
        return $content;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –î–∑–µ–Ω–µ
     */
    public function generateZenContent(Recipe $recipe)
    {
        $htmlContent = "<h1>{$recipe->title}</h1>";
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (!empty($recipe->description)) {
            $htmlContent .= "<p>{$recipe->description}</p>";
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        if (!empty($recipe->cooking_time)) {
            $htmlContent .= "<p><strong>–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</strong> {$recipe->cooking_time} –º–∏–Ω.</p>";
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        $htmlContent .= "<h2>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</h2><ul>";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        if (!empty($recipe->ingredients) && is_string($recipe->ingredients)) {
            // –°—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            $ingredients = explode("\n", $recipe->ingredients);
            foreach ($ingredients as $ingredient) {
                if (!empty(trim($ingredient))) {
                    $htmlContent .= "<li>" . trim($ingredient) . "</li>";
                }
            }
        } elseif ($recipe->ingredients && is_object($recipe->ingredients) && $recipe->ingredients->count() > 0) {
            // –ö–æ–ª–ª–µ–∫—Ü–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            foreach ($recipe->ingredients as $ingredient) {
                $htmlContent .= "<li>{$ingredient->name}";
                if (!empty($ingredient->quantity)) {
                    $htmlContent .= " ‚Äî {$ingredient->quantity}";
                    if (!empty($ingredient->unit)) {
                        $htmlContent .= " {$ingredient->unit}";
                    }
                }
                $htmlContent .= "</li>";
            }
        }
        
        $htmlContent .= "</ul>";
        
        // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        if ($recipe->steps && is_object($recipe->steps) && $recipe->steps->count() > 0) {
            $htmlContent .= "<h2>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:</h2><ol>";
            foreach ($recipe->steps as $step) {
                $htmlContent .= "<li>{$step->description}";
                if (!empty($step->image)) {
                    $htmlContent .= "<br><img src='" . asset($step->image) . "' alt='–®–∞–≥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è'>";
                }
                $htmlContent .= "</li>";
            }
            $htmlContent .= "</ol>";
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç
        $recipeUrl = route('recipes.show', $recipe->slug);
        if (!str_starts_with($recipeUrl, 'http')) {
            $recipeUrl = config('app.url') . '/' . ltrim($recipeUrl, '/');
        }
        
        $htmlContent .= "<p>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ <a href='{$recipeUrl}'>–Ω–∞—à–µ–º —Å–∞–π—Ç–µ</a>.</p>";
        
        return $htmlContent;
    }
    
    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –≤ Telegram
 
    
    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –î–∑–µ–Ω
     */
    public function publishToZen(Recipe $recipe)
    {
        try {
            $zenService = app(ZenService::class);
            $title = $recipe->title;
            $htmlContent = $this->generateZenContent($recipe);
            $imageUrl = $this->getRecipeMainImage($recipe);
            
            $result = $zenService->publish($title, $htmlContent, $imageUrl);
            
            if ($result) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                SocialPost::create([
                    'recipe_id' => $recipe->id,
                    'title' => $title, // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    'content' => $htmlContent, // –î–æ–±–∞–≤–ª—è–µ–º HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    'platform' => 'zen',
                    'post_id' => $result['publication_id'] ?? null,
                    'post_url' => $result['publication_url'] ?? null,
                    'status' => 'published',
                    'published_at' => now(),
                    'image_url' => $imageUrl, // –î–æ–±–∞–≤–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
                ]);
                
                return redirect()->back()->with('success', '–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –î–∑–µ–Ω!');
            } else {
                return redirect()->back()->with('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –î–∑–µ–Ω');
            }
        } catch (\Exception $e) {
            \Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –î–∑–µ–Ω: ' . $e->getMessage());
            return redirect()->back()->with('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' . $e->getMessage());
        }
    }

    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
     */
    public function publishToVk(Recipe $recipe)
    {
        try {
            $vkService = app(VkService::class);
            $content = $this->generateSocialContent($recipe);
            
            // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            $imageUrl = $this->getRecipeMainImage($recipe);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π, –Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É API
            $vkSettings = $vkService->checkSettings(true);
            if (!$vkSettings['success']) {
                $errors = implode(', ', $vkSettings['errors']);
                return redirect()->back()->with('error', '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: ' . $errors);
            }
            
            Log::info('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ', [
                'recipe_id' => $recipe->id,
                'image_url' => $imageUrl,
                'content_length' => strlen($content)
            ]);
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç SocialPost –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            $post = new SocialPost();
            $post->title = $recipe->title;
            $post->content = $content;
            $post->recipe_id = $recipe->id;
            $post->image_url = $imageUrl;
            $post->save();
            
            // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
            if ($vkService->publishPost($post, true)) {
                Log::info('–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ', [
                    'post_id' => $post->id,
                    'recipe_id' => $recipe->id,
                ]);
                
                return redirect()->back()->with('success', '–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ!');
            } else {
                return redirect()->back()->with('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API.');
            }
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: ' . $e->getMessage(), [
                'recipe_id' => $recipe->id,
                'exception' => $e,
                'trace' => $e->getTraceAsString()
            ]);
            return redirect()->back()->with('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' . $e->getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö
     */
    private function getRecipeMainImage(Recipe $recipe)
    {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        $imageSources = [
            $recipe->image,
            $recipe->image_url,
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∞–ª–µ—Ä–µ—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            $recipe->images && !empty($recipe->images) && is_array($recipe->images) ? reset($recipe->images) : null,
        ];
        
        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        foreach ($imageSources as $imageUrl) {
            if (!empty($imageUrl)) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º
                if (!str_starts_with($imageUrl, 'http://') && !str_starts_with($imageUrl, 'https://')) {
                    $imageUrl = config('app.url') . '/' . ltrim($imageUrl, '/');
                }
                
                // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                \Log::info('–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', [
                    'recipe_id' => $recipe->id,
                    'image_url' => $imageUrl
                ]);
                
                return $imageUrl;
            }
        }
        
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        $defaultImageUrl = asset('images/default-recipe.jpg');
        
        \Log::warning('–î–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ', [
            'recipe_id' => $recipe->id,
            'default_image' => $defaultImageUrl
        ]);
        
        return $defaultImageUrl;
    }

    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª
     */
    public function publishToTelegram(Request $request, $id)
    {
        try {
            $recipe = Recipe::findOrFail($id);
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            $text = "*{$recipe->title}*\n\n";
            $text .= $recipe->description ? strip_tags($recipe->description) . "\n\n" : '';
            
            if ($recipe->cooking_time) {
                $text .= "‚è± –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {$recipe->cooking_time} –º–∏–Ω.\n";
            }
            
            if ($recipe->servings) {
                $text .= "üçΩ –ü–æ—Ä—Ü–∏–π: {$recipe->servings}\n";
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Ü–µ–ø—Ç
            $text .= "\nüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç](" . route('recipes.show', $recipe->slug) . ")";
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
            $telegramService = new TelegramChannelService();
            $result = $telegramService->sendPhotoToChannel($recipe->getImageUrl(), $text, 'Markdown');
            
            if ($result && isset($result['ok']) && $result['ok']) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                // ...
                
                return response()->json([
                    'success' => true,
                    'message' => '–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram'
                ]);
            } else {
                Log::error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: ' . json_encode($result));
                return response()->json([
                    'success' => false,
                    'message' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram'
                ], 500);
            }
        } catch (\Exception $e) {
            Log::error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' . $e->getMessage()
            ], 500);
        }
    }
}
